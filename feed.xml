<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://saffiedencauthon.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://saffiedencauthon.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-03-15T21:57:42+00:00</updated><id>https://saffiedencauthon.github.io/feed.xml</id><title type="html">blank</title><subtitle>A website to display career progress.
</subtitle><entry><title type="html">Bit Level Hacking</title><link href="https://saffiedencauthon.github.io/blog/2022/fast-inverse-square-root/" rel="alternate" type="text/html" title="Bit Level Hacking" /><published>2022-02-06T17:30:00+00:00</published><updated>2022-02-06T17:30:00+00:00</updated><id>https://saffiedencauthon.github.io/blog/2022/fast-inverse-square-root</id><content type="html" xml:base="https://saffiedencauthon.github.io/blog/2022/fast-inverse-square-root/"><![CDATA[<h3 id="why-did-i-post-this">Why Did I Post This?</h3>

<p>My website wouldn’t be complete if it didn’t mention Fast InvSqrt(). I simply owe too much to this one function.</p>

<p>This function is what made me interested in software engineering and the reason I chose <a href="https://www.opscontrols.com/">OPS Controls</a> as the starting point of my career. I simply find bit-wise operations fun.</p>

<p>In short, this is how lighting and reflection calculations are done in the 1999 video game <em><a href="https://youtu.be/cyCgMQvG_rc?t=217">Quake III Arena</a></em>.</p>

<p>You can read more <a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">on Wikipedia</a>, or listen <a href="https://www.youtube.com/watch?v=p8u_k2LIZyo">to this YouTube video</a> for something more digestable.</p>

<hr />

<h3 id="a-quote-from-wikipedia">A Quote from Wikipedia</h3>

<blockquote>
  <p>Fast inverse square root, sometimes referred to as Fast InvSqrt() or by the hexadecimal constant <code>0x5F3759DF</code>, is an algorithm that estimates the reciprocal (or multiplicative inverse) of the square root of a 32-bit floating-point number <code>x</code> in IEEE 754 floating-point format.</p>
</blockquote>

<hr />

<h3 id="code-from-quake-iii-arena">Code from Quake III Arena</h3>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="kt">float</span> <span class="nf">Q_rsqrt</span><span class="p">(</span> <span class="kt">float</span> <span class="n">number</span> <span class="p">)</span>
<span class="p">{</span>
	<span class="kt">long</span> <span class="n">i</span><span class="p">;</span>
	<span class="kt">float</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
	<span class="k">const</span> <span class="kt">float</span> <span class="n">threehalfs</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">5</span><span class="n">F</span><span class="p">;</span>

	<span class="n">x2</span> <span class="o">=</span> <span class="n">number</span> <span class="o">*</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="n">F</span><span class="p">;</span>
	<span class="n">y</span>  <span class="o">=</span> <span class="n">number</span><span class="p">;</span>
	<span class="n">i</span>  <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="kt">long</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span>                       <span class="c1">// evil floating point bit level hacking</span>
	<span class="n">i</span>  <span class="o">=</span> <span class="mh">0x5f3759df</span> <span class="o">-</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="p">);</span>               <span class="c1">// what the fuck? </span>
	<span class="n">y</span>  <span class="o">=</span> <span class="o">*</span> <span class="p">(</span> <span class="kt">float</span> <span class="o">*</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span>
	<span class="n">y</span>  <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span> <span class="n">threehalfs</span> <span class="o">-</span> <span class="p">(</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="p">)</span> <span class="p">);</span>   <span class="c1">// 1st iteration</span>
<span class="c1">//	y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span>

	<span class="k">return</span> <span class="n">y</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<hr />]]></content><author><name></name></author><category term="story" /><category term="code," /><category term="games," /><category term="fun" /><summary type="html"><![CDATA[Fast inverse square root]]></summary></entry></feed>